/**
 * Auto-generated TypeScript definitions for Barqly Vault Tauri Commands
 * 
 * This file is automatically generated from Rust types.
 * Do not edit manually - changes will be overwritten.
 * 
 * Generated on: 2025-07-22T16:47:45.656656+00:00
 */

// Core command response types
export type CommandResult<T> = 
  | { status: 'success'; data: T }
  | { status: 'error'; data: CommandError };

export type CommandResponse<T> = T | CommandError;

// Error handling types
export interface CommandError {
  code: ErrorCode;
  message: string;
  details?: string;
  recovery_guidance?: string;
  user_actionable: boolean;
  trace_id?: string;
  span_id?: string;
}

export enum ErrorCode {
  // Validation errors
  INVALID_INPUT = 'INVALID_INPUT',
  MISSING_PARAMETER = 'MISSING_PARAMETER',
  INVALID_PATH = 'INVALID_PATH',
  INVALID_KEY_LABEL = 'INVALID_KEY_LABEL',
  WEAK_PASSPHRASE = 'WEAK_PASSPHRASE',
  INVALID_FILE_FORMAT = 'INVALID_FILE_FORMAT',
  FILE_TOO_LARGE = 'FILE_TOO_LARGE',
  TOO_MANY_FILES = 'TOO_MANY_FILES',
  
  // Permission errors
  PERMISSION_DENIED = 'PERMISSION_DENIED',
  PATH_NOT_ALLOWED = 'PATH_NOT_ALLOWED',
  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',
  READ_ONLY_FILE_SYSTEM = 'READ_ONLY_FILE_SYSTEM',
  
  // Not found errors
  KEY_NOT_FOUND = 'KEY_NOT_FOUND',
  FILE_NOT_FOUND = 'FILE_NOT_FOUND',
  DIRECTORY_NOT_FOUND = 'DIRECTORY_NOT_FOUND',
  OPERATION_NOT_FOUND = 'OPERATION_NOT_FOUND',
  
  // Operation errors
  ENCRYPTION_FAILED = 'ENCRYPTION_FAILED',
  DECRYPTION_FAILED = 'DECRYPTION_FAILED',
  STORAGE_FAILED = 'STORAGE_FAILED',
  ARCHIVE_CORRUPTED = 'ARCHIVE_CORRUPTED',
  MANIFEST_INVALID = 'MANIFEST_INVALID',
  INTEGRITY_CHECK_FAILED = 'INTEGRITY_CHECK_FAILED',
  CONCURRENT_OPERATION = 'CONCURRENT_OPERATION',
  
  // Resource errors
  DISK_SPACE_INSUFFICIENT = 'DISK_SPACE_INSUFFICIENT',
  MEMORY_INSUFFICIENT = 'MEMORY_INSUFFICIENT',
  FILE_SYSTEM_ERROR = 'FILE_SYSTEM_ERROR',
  NETWORK_ERROR = 'NETWORK_ERROR',
  
  // Security errors
  INVALID_KEY = 'INVALID_KEY',
  WRONG_PASSPHRASE = 'WRONG_PASSPHRASE',
  TAMPERED_DATA = 'TAMPERED_DATA',
  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',
  
  // Internal errors
  INTERNAL_ERROR = 'INTERNAL_ERROR',
  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',
  CONFIGURATION_ERROR = 'CONFIGURATION_ERROR',
}

// Progress tracking types
export interface ProgressUpdate {
  operation_id: string;
  progress: number; // 0.0 to 1.0
  message: string;
  details?: ProgressDetails;
  timestamp: string; // ISO 8601
  estimated_time_remaining?: number; // seconds
}

export type ProgressDetails = 
  | { type: 'FileOperation'; current_file: string; total_files: number; current_file_progress: number; current_file_size: number; total_size: number }
  | { type: 'Encryption'; bytes_processed: number; total_bytes: number; encryption_rate?: number }
  | { type: 'Decryption'; bytes_processed: number; total_bytes: number; decryption_rate?: number }
  | { type: 'ArchiveOperation'; files_processed: number; total_files: number; bytes_processed: number; total_bytes: number; compression_ratio?: number }
  | { type: 'ManifestOperation'; files_verified: number; total_files: number; current_file: string };

// Crypto command types
export interface GenerateKeyInput {
  label: string;
  passphrase: string;
}

export interface GenerateKeyResponse {
  public_key: string;
  key_label: string;
  key_id: string;
}

// File operation types
export interface FileSelectionInput {
  files: string[];
  recursive: boolean;
}

export interface FileSelectionResponse {
  selected_files: FileInfo[];
  total_size: number;
  validation_results: ValidationResult[];
}

export interface FileInfo {
  path: string;
  size: number;
  modified: string; // ISO 8601
  file_type: FileType;
  permissions: FilePermissions;
}

export interface ValidationResult {
  file_path: string;
  is_valid: boolean;
  warnings: string[];
  errors: string[];
}

export enum FileType {
  Regular = 'Regular',
  Directory = 'Directory',
  Symlink = 'Symlink',
  Other = 'Other',
}

export interface FilePermissions {
  readable: boolean;
  writable: boolean;
  executable: boolean;
}

// Storage types
export interface KeyInfo {
  key_id: string;
  label: string;
  public_key: string;
  created_at: string; // ISO 8601
  last_used: string; // ISO 8601
  usage_count: number;
}

export interface StorageInfo {
  total_space: number;
  available_space: number;
  used_space: number;
  key_count: number;
  archive_count: number;
}

// Encryption/Decryption types
export interface EncryptionInput {
  files: string[];
  key_id: string;
  output_path: string;
  compression_level: number; // 0-9
  archive_name?: string;
}

export interface DecryptionInput {
  archive_path: string;
  passphrase: string;
  output_directory: string;
  verify_integrity: boolean;
}

export interface EncryptionResponse {
  operation_id: string;
  archive_path: string;
  archive_size: number;
  compression_ratio: number;
  file_count: number;
}

export interface DecryptionResponse {
  operation_id: string;
  extracted_files: string[];
  total_files: number;
  total_size: number;
  verification_results: VerificationResult[];
}

export interface VerificationResult {
  file_path: string;
  integrity_verified: boolean;
  checksum_match: boolean;
  warnings: string[];
}

// Application state types
export interface AppConfig {
  theme: Theme;
  auto_save_keys: boolean;
  default_compression_level: number;
  max_file_size_mb: number;
  max_files_per_operation: number;
  log_level: LogLevel;
}

export enum Theme {
  Light = 'Light',
  Dark = 'Dark',
  System = 'System',
}

export enum LogLevel {
  Error = 'Error',
  Warn = 'Warn',
  Info = 'Info',
  Debug = 'Debug',
  Trace = 'Trace',
} 