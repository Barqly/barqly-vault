name: Complete Notarization

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the release workflow to complete notarization for'
        required: false
      auto_release:
        description: 'Automatically publish release when notarization completes'
        type: boolean
        default: false
  
  # Can also run on schedule to check pending notarizations
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes

jobs:
  check-and-staple:
    runs-on: macos-latest
    permissions:
      contents: write
      actions: read
    
    strategy:
      matrix:
        arch: [intel, apple-silicon]
    
    steps:
      - uses: actions/checkout@v4
      
      # Download notarization artifacts from the release workflow
      - name: Download Notarization Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: release-async.yml
          workflow_conclusion: success
          name: notarization-${{ matrix.arch }}
          path: notarization-artifacts/
          run_id: ${{ github.event.inputs.run_id }}
        continue-on-error: true  # Don't fail if artifacts don't exist
      
      - name: Check and Complete Notarization
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        run: |
          # Check if we have artifacts to process
          if [ ! -f "notarization-artifacts/submission-id-${{ matrix.arch }}.txt" ]; then
            echo "No notarization artifacts found for ${{ matrix.arch }}"
            exit 0
          fi
          
          # Setup API key
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" | base64 --decode > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          
          # Read submission ID
          SUBMISSION_ID=$(cat notarization-artifacts/submission-id-${{ matrix.arch }}.txt)
          echo "Checking notarization status for submission: $SUBMISSION_ID"
          
          # Check status
          MAX_ATTEMPTS=120  # 60 hours with 30-minute cron
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
              --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
              --key-id "$APPLE_API_KEY_ID" \
              --issuer "$APPLE_API_ISSUER_ID" \
              --output-format json)
            
            STATUS=$(echo "$STATUS_OUTPUT" | jq -r '.status')
            
            echo "Status: $STATUS"
            
            if [ "$STATUS" = "Accepted" ]; then
              echo "‚úÖ Notarization accepted!"
              break
            elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
              echo "‚ùå Notarization failed with status: $STATUS"
              # Get detailed log
              xcrun notarytool log "$SUBMISSION_ID" \
                --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
                --key-id "$APPLE_API_KEY_ID" \
                --issuer "$APPLE_API_ISSUER_ID"
              exit 1
            elif [ "$STATUS" = "In Progress" ]; then
              echo "‚è≥ Still in progress..."
              # For manual runs, wait and retry
              if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                sleep 60
                ATTEMPT=$((ATTEMPT + 1))
              else
                # For scheduled runs, exit and check again next time
                echo "Will check again in next scheduled run"
                exit 0
              fi
            else
              echo "Unknown status: $STATUS"
              echo "$STATUS_OUTPUT"
              exit 1
            fi
          done
          
          if [ "$STATUS" != "Accepted" ]; then
            echo "‚ùå Notarization not completed after $MAX_ATTEMPTS attempts"
            exit 1
          fi
          
          # Find the DMG file
          DMG_FILE=$(find notarization-artifacts -name "*.dmg" -type f | head -1)
          
          if [ ! -f "$DMG_FILE" ]; then
            echo "‚ùå DMG file not found in artifacts"
            exit 1
          fi
          
          # Staple the notarization ticket
          echo "üìå Stapling notarization ticket to $DMG_FILE..."
          if ! xcrun stapler staple "$DMG_FILE"; then
            echo "‚ùå Failed to staple notarization ticket"
            exit 1
          fi
          
          # Verify the notarization
          echo "‚úÖ Verifying notarization..."
          if ! xcrun stapler validate "$DMG_FILE"; then
            echo "‚ùå Notarization validation failed"
            exit 1
          fi
          
          echo "üéâ DMG successfully notarized and stapled!"
          
          # Rename for consistent naming
          VERSION="${GITHUB_REF#refs/tags/v}"
          if [ "${{ matrix.arch }}" = "intel" ]; then
            ARCH_NAME="x64"
          else
            ARCH_NAME="arm64"
          fi
          
          NEW_NAME="barqly-vault-${VERSION}-macos-${ARCH_NAME}.dmg"
          mv "$DMG_FILE" "$NEW_NAME"
          
          # Mark as completed (remove submission ID file so we don't process again)
          rm notarization-artifacts/submission-id-${{ matrix.arch }}.txt
          
          # Clean up
          rm -f ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
      
      # Upload completed DMG
      - name: Upload Notarized DMG
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: notarized-dmg-${{ matrix.arch }}
          path: "*.dmg"
          retention-days: 30
      
      # Optionally update the release
      - name: Update Release with Notarized DMG
        if: success() && github.event.inputs.auto_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the release
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"
          
          # Upload the notarized DMG to the release
          for DMG in *.dmg; do
            if [ -f "$DMG" ]; then
              echo "Uploading $DMG to release $RELEASE_TAG"
              gh release upload "$RELEASE_TAG" "$DMG" --clobber
            fi
          done