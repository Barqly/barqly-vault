name: Release Pipeline (Async Notarization)

on:
  push:
    tags:
      - 'v*.*.*'        # Production releases
      - 'v*.*.*-beta*'  # Beta releases
      - 'v*.*.*-rc*'    # Release candidates
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'intel'
            label: 'macOS (Intel)'
          
          # macOS Apple Silicon  
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'apple-silicon'
            label: 'macOS (Apple M-series)'
          
          # Linux x64
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            arch: 'x64'
            label: 'Linux (Intel/AMD)'
          
          # Windows x64
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            arch: 'x64'
            label: 'Windows'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Setup Apple certificate for macOS signing
      - name: Setup Apple certificate
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE_P12 != ''
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$RUNNER_TEMP" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$RUNNER_TEMP" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$RUNNER_TEMP" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Clean up certificate file
          rm $CERTIFICATE_PATH
          
          echo "✅ Certificate imported successfully"
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch == 'intel' && 'x86_64-apple-darwin' || matrix.arch == 'apple-silicon' && 'aarch64-apple-darwin' || matrix.arch == 'x64' && contains(matrix.platform, 'ubuntu') && 'x86_64-unknown-linux-gnu' || matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: install dependencies (ubuntu only)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf xdg-utils
          sudo apt-get install -y libwebkit2gtk-4.0-dev || true
          sudo apt-get install -y rpm
      
      - name: install frontend dependencies
        run: npm install --prefix src-ui
      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_DEVELOPER_ID }}
          # Intentionally NOT passing notarization credentials
          # We handle notarization asynchronously
        with:
          tagName: app-v__VERSION__
          releaseName: 'Barqly Vault v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
      
      # Submit notarization WITHOUT waiting (macOS only)
      - name: Submit macOS DMG for Async Notarization
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        run: |
          # Fail if API credentials are not configured
          if [ -z "$APPLE_API_KEY" ] || [ -z "$APPLE_API_KEY_ID" ] || [ -z "$APPLE_API_ISSUER_ID" ]; then
            echo "❌ ERROR: Apple notarization credentials are not configured!"
            exit 1
          fi
          
          echo "🔐 Setting up App Store Connect API authentication..."
          
          # Create directory and save the API key (decode from base64)
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" | base64 --decode > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          
          # Find the DMG file
          if [ "${{ matrix.arch }}" = "intel" ]; then
            DMG_DIR="$GITHUB_WORKSPACE/target/x86_64-apple-darwin/release/bundle/dmg"
            ARCH_NAME="x64"
          elif [ "${{ matrix.arch }}" = "apple-silicon" ]; then
            DMG_DIR="$GITHUB_WORKSPACE/target/aarch64-apple-darwin/release/bundle/dmg"
            ARCH_NAME="arm64"
          fi
          
          DMG_FILE=$(find "$DMG_DIR" -name "*.dmg" -type f 2>/dev/null | head -1)
          
          if [ ! -f "$DMG_FILE" ]; then
            echo "❌ ERROR: DMG not found!"
            exit 1
          fi
          
          echo "📤 Submitting DMG for notarization (async): $DMG_FILE"
          
          # Submit WITHOUT --wait and capture submission ID
          SUBMISSION_OUTPUT=$(xcrun notarytool submit "$DMG_FILE" \
            --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER_ID" \
            --output-format json)
          
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | jq -r '.id')
          
          if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ]; then
            echo "❌ ERROR: Failed to get submission ID"
            echo "$SUBMISSION_OUTPUT"
            exit 1
          fi
          
          echo "✅ Submitted for notarization"
          echo "Submission ID: $SUBMISSION_ID"
          
          # Save submission ID and DMG path for later
          mkdir -p notarization-artifacts
          echo "$SUBMISSION_ID" > notarization-artifacts/submission-id-${{ matrix.arch }}.txt
          echo "$DMG_FILE" > notarization-artifacts/dmg-path-${{ matrix.arch }}.txt
          cp "$DMG_FILE" notarization-artifacts/
          
          # Clean up
          rm -f ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
      
      # Upload notarization artifacts
      - name: Upload Notarization Artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: notarization-${{ matrix.arch }}
          path: notarization-artifacts/
          retention-days: 7
      
      # Upload other build artifacts (Windows, Linux)
      - name: Upload Build Artifacts
        if: matrix.platform != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            target/release/bundle/**/*.msi
            target/release/bundle/**/*.exe
            target/release/bundle/**/*.deb
            target/release/bundle/**/*.rpm
            target/release/bundle/**/*.AppImage
          retention-days: 7
      
      # Cleanup keychain (macOS only)
      - name: Cleanup keychain
        if: always() && matrix.platform == 'macos-latest'
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain $KEYCHAIN_PATH || true
          fi