name: 'macOS Notarization'
description: 'Submit, wait for, and staple Apple notarization for macOS applications'
author: 'Barqly'

inputs:
  dmg-path:
    description: 'Path to the DMG file to notarize'
    required: true
  api-key:
    description: 'Apple API key (base64 encoded)'
    required: true
  api-key-id:
    description: 'Apple API Key ID'
    required: true
  api-issuer-id:
    description: 'Apple API Issuer ID'
    required: true
  max-wait-minutes:
    description: 'Maximum minutes to wait for notarization'
    required: false
    default: '10'

outputs:
  submission-id:
    description: 'Notarization submission ID'
    value: ${{ steps.notarize.outputs.submission-id }}
  status:
    description: 'Final notarization status'
    value: ${{ steps.notarize.outputs.status }}

runs:
  using: "composite"
  steps:
    - name: Notarize DMG
      id: notarize
      shell: bash
      env:
        APPLE_API_KEY: ${{ inputs.api-key }}
        APPLE_API_KEY_ID: ${{ inputs.api-key-id }}
        APPLE_API_ISSUER_ID: ${{ inputs.api-issuer-id }}
        DMG_PATH: ${{ inputs.dmg-path }}
        MAX_WAIT: ${{ inputs.max-wait-minutes }}
      run: |
        # Fail if API credentials are not configured
        if [ -z "$APPLE_API_KEY" ] || [ -z "$APPLE_API_KEY_ID" ] || [ -z "$APPLE_API_ISSUER_ID" ]; then
          echo "❌ ERROR: Apple notarization credentials are not configured!"
          echo "Required: APPLE_API_KEY, APPLE_API_KEY_ID, APPLE_API_ISSUER_ID"
          exit 1
        fi
        
        # Validate DMG exists
        if [ ! -f "$DMG_PATH" ]; then
          echo "❌ ERROR: DMG file not found at: $DMG_PATH"
          exit 1
        fi
        
        echo "🔐 Setting up App Store Connect API authentication..."
        
        # Create directory and save the API key
        mkdir -p ~/private_keys
        echo "$APPLE_API_KEY" | base64 --decode > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
        
        # Validate the API key file
        if [ ! -s ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 ]; then
          echo "❌ ERROR: API key file is empty after decode!"
          exit 1
        fi
        
        if ! grep -q "BEGIN PRIVATE KEY" ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8; then
          echo "❌ ERROR: API key file is not valid!"
          exit 1
        fi
        
        echo "✅ API key validated"
        echo "📤 Submitting DMG for notarization: $DMG_PATH"
        
        # Submit for notarization
        SUBMISSION_JSON=$(xcrun notarytool submit "$DMG_PATH" \
          --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
          --key-id "$APPLE_API_KEY_ID" \
          --issuer "$APPLE_API_ISSUER_ID" \
          --output-format json)
        
        SUBMISSION_ID=$(echo "$SUBMISSION_JSON" | jq -r '.id')
        
        if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ]; then
          echo "❌ ERROR: Failed to submit for notarization!"
          echo "$SUBMISSION_JSON"
          exit 1
        fi
        
        echo "✅ Submitted successfully. Submission ID: $SUBMISSION_ID"
        echo "submission-id=$SUBMISSION_ID" >> $GITHUB_OUTPUT
        echo "⏳ Polling for notarization status..."
        
        # Calculate max attempts (2 attempts per minute)
        MAX_ATTEMPTS=$((MAX_WAIT * 2))
        
        for i in $(seq 1 $MAX_ATTEMPTS); do
          sleep 30
          
          STATUS_JSON=$(xcrun notarytool info "$SUBMISSION_ID" \
            --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER_ID" \
            --output-format json)
          
          STATUS=$(echo "$STATUS_JSON" | jq -r '.status')
          
          echo "  Attempt $i/$MAX_ATTEMPTS: Status = $STATUS"
          
          if [ "$STATUS" = "Accepted" ]; then
            echo "🎉 Notarization accepted!"
            break
          elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
            echo "❌ Notarization failed with status: $STATUS"
            # Get detailed log
            xcrun notarytool log "$SUBMISSION_ID" \
              --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
              --key-id "$APPLE_API_KEY_ID" \
              --issuer "$APPLE_API_ISSUER_ID"
            exit 1
          fi
        done
        
        # Check if we completed successfully
        if [ "$STATUS" != "Accepted" ]; then
          echo "❌ ERROR: Notarization did not complete within $MAX_WAIT minutes!"
          echo "Last status: $STATUS"
          exit 1
        fi
        
        # Staple the notarization ticket
        echo "📌 Stapling notarization ticket..."
        if ! xcrun stapler staple "$DMG_PATH"; then
          echo "❌ ERROR: Failed to staple notarization ticket!"
          exit 1
        fi
        
        # Verify the notarization
        echo "✅ Verifying notarization..."
        if ! xcrun stapler validate "$DMG_PATH"; then
          echo "❌ ERROR: Notarization validation failed!"
          exit 1
        fi
        
        echo "🎉 DMG successfully notarized and stapled"
        echo "status=Accepted" >> $GITHUB_OUTPUT
        
        # Clean up the API key file
        rm -f ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8