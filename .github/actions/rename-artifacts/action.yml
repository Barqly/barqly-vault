name: 'Rename Release Artifacts'
description: 'Standardize artifact naming across all platforms'
author: 'Barqly'

inputs:
  platform:
    description: 'Platform: macos-latest, ubuntu-*, windows-latest'
    required: true
  arch:
    description: 'Architecture: intel, apple-silicon, x64'
    required: true
  version:
    description: 'Version string (without v prefix)'
    required: true
  workspace:
    description: 'GitHub workspace path'
    required: false
    default: ${{ github.workspace }}

outputs:
  artifacts-dir:
    description: 'Directory containing renamed artifacts'
    value: ${{ steps.rename.outputs.artifacts-dir }}
  artifact-count:
    description: 'Number of artifacts renamed'
    value: ${{ steps.rename.outputs.count }}

runs:
  using: "composite"
  steps:
    - name: Rename Artifacts
      id: rename
      shell: bash
      env:
        PLATFORM: ${{ inputs.platform }}
        ARCH: ${{ inputs.arch }}
        VERSION: ${{ inputs.version }}
        WORKSPACE: ${{ inputs.workspace }}
      run: |
        echo "📦 Renaming artifacts for $PLATFORM ($ARCH) version $VERSION"
        
        # Create directory for renamed artifacts
        mkdir -p renamed-artifacts
        ARTIFACT_COUNT=0
        
        # Handle macOS DMG files
        if [[ "$PLATFORM" == "macos-latest" ]]; then
          # Set architecture name first (needed for both DMG and tar.gz)
          if [ "$ARCH" = "intel" ]; then
            DMG_DIR="$WORKSPACE/target/x86_64-apple-darwin/release/bundle/dmg"
            ARCH_NAME="x86_64"
            TARGET_DIR="$WORKSPACE/target/x86_64-apple-darwin"
          elif [ "$ARCH" = "apple-silicon" ]; then
            DMG_DIR="$WORKSPACE/target/aarch64-apple-darwin/release/bundle/dmg"
            ARCH_NAME="arm64"
            TARGET_DIR="$WORKSPACE/target/aarch64-apple-darwin"
          fi
          
          # Find and rename DMG
          DMG_FILE=$(find "$DMG_DIR" -name "*.dmg" -type f 2>/dev/null | head -1)
          if [ -f "$DMG_FILE" ]; then
            # Verify DMG is properly signed and notarized (MANDATORY)
            if ! xcrun stapler validate "$DMG_FILE" 2>/dev/null; then
              echo "⚠️ WARNING: DMG is not properly notarized!"
              echo "File: $DMG_FILE"
              # Don't fail here as notarization might happen separately
            fi
            
            NEW_NAME="barqly-vault-$VERSION-macos-${ARCH_NAME}.dmg"
            cp "$DMG_FILE" "renamed-artifacts/$NEW_NAME"
            echo "✅ Created: $NEW_NAME"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          else
            echo "❌ No DMG file found in $DMG_DIR"
          fi
          
          # Note: We only distribute DMGs for macOS (no tar.gz needed as DMGs are notarized)
        fi
        
        # Handle Windows artifacts
        if [[ "$PLATFORM" == "windows-latest" ]]; then
          # MSI installer
          MSI_FILE=$(find "$WORKSPACE/target" -name "*.msi" -type f 2>/dev/null | head -1)
          if [ -f "$MSI_FILE" ]; then
            cp "$MSI_FILE" "renamed-artifacts/barqly-vault-$VERSION-x64.msi"
            echo "✅ Created: barqly-vault-$VERSION-x64.msi"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          fi
          
          # Skip setup.exe - we only distribute MSI and ZIP
          
          # Create standalone ZIP
          EXE_FILE="$WORKSPACE/target/release/barqly-vault.exe"
          if [ -f "$EXE_FILE" ]; then
            # Use PowerShell to create ZIP on Windows
            powershell -Command "Compress-Archive -Path '$EXE_FILE' -DestinationPath 'renamed-artifacts/barqly-vault-$VERSION-windows-x64.zip'"
            echo "✅ Created standalone ZIP"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          fi
        fi
        
        # Handle Linux artifacts
        if [[ "$PLATFORM" == *"ubuntu"* ]]; then
          # Determine architecture-specific names
          if [ "$ARCH" = "x64" ]; then
            DEB_ARCH="amd64"
            RPM_ARCH="x86_64"
            TAR_ARCH="x86_64"
            BINARY_PATH="$WORKSPACE/target/x86_64-unknown-linux-gnu/release/barqly-vault"
            # Fallback to default release path if target-specific doesn't exist
            if [ ! -f "$BINARY_PATH" ]; then
              BINARY_PATH="$WORKSPACE/target/release/barqly-vault"
            fi
          elif [ "$ARCH" = "arm64" ]; then
            DEB_ARCH="arm64"
            RPM_ARCH="aarch64"
            TAR_ARCH="aarch64"
            BINARY_PATH="$WORKSPACE/target/aarch64-unknown-linux-gnu/release/barqly-vault"
          fi
          
          # DEB package
          DEB_FILE=$(find "$WORKSPACE/target" -name "*.deb" -type f 2>/dev/null | head -1)
          if [ -f "$DEB_FILE" ]; then
            cp "$DEB_FILE" "renamed-artifacts/barqly-vault-$VERSION-1_${DEB_ARCH}.deb"
            echo "✅ Created: barqly-vault-$VERSION-1_${DEB_ARCH}.deb"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          fi
          
          # RPM package
          RPM_FILE=$(find "$WORKSPACE/target" -name "*.rpm" -type f 2>/dev/null | head -1)
          if [ -f "$RPM_FILE" ]; then
            cp "$RPM_FILE" "renamed-artifacts/barqly-vault-$VERSION-1.${RPM_ARCH}.rpm"
            echo "✅ Created: barqly-vault-$VERSION-1.${RPM_ARCH}.rpm"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          fi
          
          # AppImage (typically only for x64)
          if [ "$ARCH" = "x64" ]; then
            APPIMAGE_FILE=$(find "$WORKSPACE/target" -name "*.AppImage" -type f 2>/dev/null | head -1)
            if [ -f "$APPIMAGE_FILE" ]; then
              cp "$APPIMAGE_FILE" "renamed-artifacts/barqly-vault-$VERSION-1_${DEB_ARCH}.AppImage"
              echo "✅ Created: barqly-vault-$VERSION-1_${DEB_ARCH}.AppImage"
              ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
            fi
          fi
          
          # Create standalone tar.gz
          if [ -f "$BINARY_PATH" ]; then
            tar -czf "renamed-artifacts/barqly-vault-$VERSION-${TAR_ARCH}.tar.gz" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
            echo "✅ Created: barqly-vault-$VERSION-${TAR_ARCH}.tar.gz"
            ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
          else
            echo "⚠️ Binary not found at $BINARY_PATH"
          fi
        fi
        
        # List all renamed artifacts
        echo "📦 Renamed $ARTIFACT_COUNT artifacts:"
        ls -la renamed-artifacts/ || echo "No artifacts found"
        
        echo "artifacts-dir=renamed-artifacts" >> $GITHUB_OUTPUT
        echo "count=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT