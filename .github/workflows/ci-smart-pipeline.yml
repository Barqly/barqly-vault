name: Smart CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'public-docs/**'
      - '**.md'
      - '.github/workflows/deploy-docs.yml'
  
  push:
    branches: [main]
    paths-ignore:
      - 'public-docs/**'
      - '**.md'
      - '.github/workflows/deploy-docs.yml'
  
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos
          - linux
          - windows
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      run_tests:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine what changed to optimize builds
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      frontend: ${{ steps.filter.outputs.frontend }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'src-tauri/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
            frontend:
              - 'src-ui/**'
              - 'package.json'
              - 'package-lock.json'
            workflows:
              - '.github/workflows/**'

  # Frontend validation (only if frontend changed)
  frontend-validation:
    name: Frontend Validation
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run frontend validation
        run: |
          echo "Running frontend validation..."
          make validate-ui
      
      - name: Check bundle size
        run: |
          npm run build --prefix src-ui
          size=$(du -sb src-ui/dist | cut -f1)
          echo "Bundle size: $size bytes"
          if [ $size -gt 5242880 ]; then
            echo "Warning: Bundle size exceeds 5MB"
          fi

  # Rust validation (only if Rust changed)
  rust-validation:
    name: Rust Validation
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev
      
      - name: Run Rust validation
        run: |
          echo "Running Rust validation..."
          make validate-rust

  # Security checks (always run on main branch)
  security-checks:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit for Rust
        run: |
          cargo install cargo-audit || true
          cd src-tauri && cargo audit || true
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          extra_args: --debug --only-verified

  # Quick build test (PR only, single platform)
  build-test:
    name: Build Test
    needs: [frontend-validation, rust-validation]
    if: |
      github.event_name == 'pull_request' &&
      (needs.frontend-validation.result == 'success' || needs.frontend-validation.result == 'skipped') &&
      (needs.rust-validation.result == 'success' || needs.rust-validation.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup build environment
        uses: ./.github/actions/setup-build-env
      
      - name: Test build
        run: |
          echo "Testing build on Linux..."
          cd src-tauri
          cargo build --release
          
      - name: Upload test artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: test-build-linux
          path: src-tauri/target/release/barqly-vault
          retention-days: 1

  # Full platform builds (main branch or manual trigger)
  platform-builds:
    name: Platform Builds
    needs: [frontend-validation, rust-validation]
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      (needs.frontend-validation.result == 'success' || needs.frontend-validation.result == 'skipped') &&
      (needs.rust-validation.result == 'success' || needs.rust-validation.result == 'skipped')
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: Linux
            target: x86_64-unknown-linux-gnu
            bundles: 'appimage,deb'
          
          - os: macos-13
            name: macOS-Intel
            target: x86_64-apple-darwin
            bundles: 'dmg'
          
          - os: macos-14
            name: macOS-ARM
            target: aarch64-apple-darwin
            bundles: 'dmg'
          
          - os: windows-2022
            name: Windows
            target: x86_64-pc-windows-msvc
            bundles: 'msi,nsis'
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: ${{ matrix.os }}-${{ matrix.target }}
      
      - name: Install platform dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev \
            libayatana-appindicator3-dev
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Build application
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: |
          cd src-tauri
          cargo tauri build --target ${{ matrix.target }} --bundles ${{ matrix.bundles }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: barqly-vault-${{ matrix.name }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/
          retention-days: 7

  # Smoke tests for built artifacts
  smoke-tests:
    name: Smoke Tests
    needs: platform-builds
    if: success()
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: barqly-vault-*
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests for ${{ runner.os }}..."
          # Add actual smoke test commands here

  # Summary job for branch protection
  ci-summary:
    name: CI Summary
    needs: [frontend-validation, rust-validation, security-checks, build-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.frontend-validation.result }}" == "failure" ]] || 
             [[ "${{ needs.rust-validation.result }}" == "failure" ]] ||
             [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "CI failed"
            exit 1
          fi
          echo "CI passed"