name: Deploy Public Documentation

on:
  push:
    branches: ["main"]
    paths: ["public-docs/**"] # Only trigger when docs change
  release:
    types: [published] # Trigger when production release is published
  workflow_dispatch: # Allow manual deployment

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Update download page when production release is published
  update-downloads:
    if: github.event_name == 'release' && !contains(github.event.release.tag_name, '-beta')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from published release
        id: get_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Updating downloads page for published release: v$VERSION"
      
      - name: Update Downloads Page
        uses: ./.github/actions/update-download-page
        with:
          version: ${{ steps.get_version.outputs.VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Success Summary
        run: |
          echo "## ✅ Downloads Page Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY  
          echo "- **Version**: v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: Published" >> $GITHUB_STEP_SUMMARY
          echo "- **Downloads Page**: Updated and committed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live Downloads**: https://barqly.com/vault/downloads/" >> $GITHUB_STEP_SUMMARY

  build:
    # Skip build if this is a release event (only update-downloads should run)
    if: ${{ github.event_name != 'release' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate content exists
        run: |
          if [ ! -d "public-docs" ]; then
            echo "Error: public-docs directory not found"
            exit 1
          fi
          echo "Found documentation files:"
          find public-docs -type f -name "*.html" -o -name "*.md" | head -10

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Disable Jekyll processing
        run: touch public-docs/.nojekyll

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./public-docs"

  deploy:
    # Skip deploy if this is a release event (only update-downloads should run)
    if: ${{ github.event_name != 'release' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
