name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'        # Production releases
      - 'v*.*.*-beta*'  # Beta releases
      - 'v*.*.*-rc*'    # Release candidates
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel (like Sparrow)
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'intel'
            label: 'macOS (Intel)'
          
          # macOS Apple Silicon (like Sparrow)  
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'apple-silicon'
            label: 'macOS (Apple M-series)'
          
          # Linux x64 - Intel/AMD (like Sparrow: .deb, .rpm, .tar.gz)
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            arch: 'x64'
            label: 'Linux (Intel/AMD)'
          
          # Linux ARM64 (like Sparrow: .deb, .rpm, .tar.gz)
          - platform: 'ubuntu-latest'
            args: '--target aarch64-unknown-linux-gnu'
            arch: 'arm64'
            label: 'Linux (ARM64)'
          
          # Windows x64 (like Sparrow: .msi and .zip)
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            arch: 'x64'
            label: 'Windows'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Install the specific target for this matrix job
          # Each job only builds for ONE specific architecture
          targets: ${{ matrix.arch == 'intel' && 'x86_64-apple-darwin' || matrix.arch == 'apple-silicon' && 'aarch64-apple-darwin' || matrix.arch == 'x64' && contains(matrix.platform, 'ubuntu') && 'x86_64-unknown-linux-gnu' || matrix.arch == 'arm64' && 'aarch64-unknown-linux-gnu' || matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: install dependencies (ubuntu only)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          # For Ubuntu 24.04 (ubuntu-latest), only 4.1 is available
          # For Ubuntu 22.04, both 4.0 and 4.1 are available
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf xdg-utils
          # Try to install 4.0 if available (for older Ubuntu)
          sudo apt-get install -y libwebkit2gtk-4.0-dev || true
          # Install RPM build tools for creating .rpm packages
          sudo apt-get install -y rpm
      
      - name: install ARM64 cross-compilation tools (ubuntu ARM64 only)
        if: matrix.arch == 'arm64' && contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml
      
      - name: install frontend dependencies
        run: npm install --prefix src-ui
      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'Barqly Vault v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          
      # Rename macOS DMG files to include architecture (like Sparrow)
      - name: Rename macOS DMG with architecture
        if: matrix.platform == 'macos-latest'
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/v?(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="dev"
          fi
          
          # Determine the DMG path based on architecture
          if [ "${{ matrix.arch }}" = "intel" ]; then
            TARGET_DIR="src-tauri/target/x86_64-apple-darwin/release/bundle/macos"
            NEW_NAME="Sparrow-style/Barqly-Vault-$VERSION-x86_64.dmg"
          elif [ "${{ matrix.arch }}" = "apple-silicon" ]; then
            TARGET_DIR="src-tauri/target/aarch64-apple-darwin/release/bundle/macos"
            NEW_NAME="Sparrow-style/Barqly-Vault-$VERSION-aarch64.dmg"
          fi
          
          # Create Sparrow-style naming directory
          mkdir -p "$TARGET_DIR/Sparrow-style"
          
          # Find and rename the DMG
          if [ -f "$TARGET_DIR/Barqly Vault.dmg" ]; then
            mv "$TARGET_DIR/Barqly Vault.dmg" "$TARGET_DIR/$NEW_NAME"
            echo "Renamed DMG to: $(basename $NEW_NAME)"
            echo "DMG_PATH=$TARGET_DIR/$NEW_NAME" >> $GITHUB_ENV
          fi
      
      # Create standalone .zip for Windows (like Sparrow)
      - name: Create Windows standalone ZIP
        if: matrix.platform == 'windows-latest'
        run: |
          $version = if ($env:GITHUB_REF -match "refs/tags/(.+)") { $matches[1] } else { "dev" }
          $zipName = "Barqly-Vault-$version-standalone-x64.zip"
          $appPath = "src-tauri/target/release/Barqly Vault.exe"
          if (Test-Path $appPath) {
            Compress-Archive -Path $appPath -DestinationPath $zipName
            echo "Created standalone ZIP: $zipName"
          }
      
      # Create .tar.gz for Linux (like Sparrow)  
      - name: Create Linux standalone archive
        if: contains(matrix.platform, 'ubuntu')
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="dev"
          fi
          
          BINARY_PATH="src-tauri/target/release/barqly-vault"
          if [ -f "$BINARY_PATH" ]; then
            ARCHIVE_NAME="barqly-vault-$VERSION-${{ matrix.arch }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
            echo "Created standalone archive: $ARCHIVE_NAME"
          fi