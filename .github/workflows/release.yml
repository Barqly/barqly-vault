name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'        # Production releases
      - 'v*.*.*-beta*'  # Beta releases
      - 'v*.*.*-rc*'    # Release candidates
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel (like Sparrow)
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'intel'
            label: 'macOS (Intel)'
          
          # macOS Apple Silicon (like Sparrow)  
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'apple-silicon'
            label: 'macOS (Apple M-series)'
          
          # Linux x64 - Intel/AMD (.deb, .rpm, .appimage, .tar.gz)
          # Note: Linux x64 binaries work on ARM64 via compatibility layer
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            arch: 'x64'
            label: 'Linux (Intel/AMD)'
          
          # Windows x64 (.msi and .zip)
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            arch: 'x64'
            label: 'Windows'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Setup Apple certificate for macOS signing (if secrets are configured)
      - name: Setup Apple certificate
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE_P12 != ''
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$RUNNER_TEMP" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$RUNNER_TEMP" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$RUNNER_TEMP" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Clean up certificate file
          rm $CERTIFICATE_PATH
          
          echo "‚úÖ Certificate imported successfully"
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Install the specific target for this matrix job
          targets: ${{ matrix.arch == 'intel' && 'x86_64-apple-darwin' || matrix.arch == 'apple-silicon' && 'aarch64-apple-darwin' || matrix.arch == 'x64' && contains(matrix.platform, 'ubuntu') && 'x86_64-unknown-linux-gnu' || matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: install dependencies (ubuntu only)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          # For Ubuntu 24.04 (ubuntu-latest), only 4.1 is available
          # For Ubuntu 22.04, both 4.0 and 4.1 are available
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf xdg-utils
          # Try to install 4.0 if available (for older Ubuntu)
          sudo apt-get install -y libwebkit2gtk-4.0-dev || true
          # Install RPM build tools for creating .rpm packages
          sudo apt-get install -y rpm
      
      - name: install frontend dependencies
        run: npm install --prefix src-ui
      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Only pass signing identity - notarization will be handled separately
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_DEVELOPER_ID }}
          # Don't pass APPLE_ID or APPLE_PASSWORD to prevent Tauri from notarizing
        with:
          tagName: app-v__VERSION__
          releaseName: 'Barqly Vault v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
      
      # Notarize macOS DMG using App Store Connect API key
      - name: Notarize macOS DMG with API Key
        if: matrix.platform == 'macos-latest' && env.APPLE_API_KEY != ''
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        run: |
          echo "üîê Setting up App Store Connect API authentication..."
          
          # Create directory and save the API key
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" > ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          
          # Find the DMG file based on architecture
          if [ "${{ matrix.arch }}" = "intel" ]; then
            TARGET_DIR="src-tauri/target/x86_64-apple-darwin/release/bundle/macos"
          elif [ "${{ matrix.arch }}" = "apple-silicon" ]; then
            TARGET_DIR="src-tauri/target/aarch64-apple-darwin/release/bundle/macos"
          fi
          
          # DMG file is now "barqly-vault.dmg" in bundle/macos (all lowercase)
          DMG_FILE="$TARGET_DIR/barqly-vault.dmg"
          
          if [ -f "$DMG_FILE" ]; then
            echo "üì§ Submitting DMG for notarization: $DMG_FILE"
            
            # Submit for notarization using API key
            xcrun notarytool submit "$DMG_FILE" \
              --key ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8 \
              --key-id "$APPLE_API_KEY_ID" \
              --issuer "$APPLE_API_ISSUER_ID" \
              --wait \
              --timeout 10m
            
            # Staple the notarization ticket
            echo "üìå Stapling notarization ticket..."
            xcrun stapler staple "$DMG_FILE"
            
            # Verify the notarization
            echo "‚úÖ Verifying notarization..."
            xcrun stapler validate "$DMG_FILE"
            
            echo "üéâ DMG successfully notarized and stapled"
          else
            echo "‚ö†Ô∏è DMG not found at: $DMG_FILE"
            echo "Searching for DMG files in the entire target directory:"
            find src-tauri/target -name "*.dmg" -type f || echo "No DMG files found"
            echo "Contents of expected directory $TARGET_DIR:"
            ls -la "$TARGET_DIR" || echo "Directory not found"
          fi
          
          # Clean up the API key file
          rm -f ~/private_keys/AuthKey_${APPLE_API_KEY_ID}.p8
          
      # Rename macOS DMG files to include architecture and signing status
      - name: Rename macOS DMG with architecture
        if: matrix.platform == 'macos-latest'
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/v?(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="dev"
          fi
          
          # Use same path logic as notarization step
          if [ "${{ matrix.arch }}" = "intel" ]; then
            TARGET_DIR="src-tauri/target/x86_64-apple-darwin/release/bundle/macos"
            ARCH_NAME="x64"
          elif [ "${{ matrix.arch }}" = "apple-silicon" ]; then
            TARGET_DIR="src-tauri/target/aarch64-apple-darwin/release/bundle/macos"
            ARCH_NAME="aarch64"
          fi
          
          # DMG file is now "barqly-vault.dmg" in bundle/macos (all lowercase)
          DMG_FILE="$TARGET_DIR/barqly-vault.dmg"
          
          # Create Sparrow-style naming directory
          mkdir -p "$TARGET_DIR/Sparrow-style"
          
          # Rename the DMG if it exists
          if [ -f "$DMG_FILE" ]; then
            # Check if DMG is signed and notarized
            if xcrun stapler validate "$DMG_FILE" 2>/dev/null; then
              echo "‚úÖ DMG is signed and notarized"
              SIGNING_STATUS="-signed-notarized"
            elif codesign -dv "$DMG_FILE" 2>/dev/null; then
              echo "‚úÖ DMG is signed (not notarized)"
              SIGNING_STATUS="-signed"
            else
              echo "‚ö†Ô∏è DMG is unsigned"
              SIGNING_STATUS=""
            fi
            
            # Create new name with signing status (all lowercase with hyphens)
            NEW_NAME="barqly-vault-$VERSION-macos-${ARCH_NAME}${SIGNING_STATUS}.dmg"
            
            # Copy to workspace root for artifact upload
            cp "$DMG_FILE" "$GITHUB_WORKSPACE/$NEW_NAME"
            echo "Copied DMG to workspace root: $NEW_NAME"
            
            # Also keep in Sparrow-style directory for organization
            mkdir -p "$TARGET_DIR/Sparrow-style"
            mv "$DMG_FILE" "$TARGET_DIR/Sparrow-style/$NEW_NAME"
            
            echo "DMG_PATH=$GITHUB_WORKSPACE/$NEW_NAME" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è DMG not found at: $DMG_FILE"
          fi
      
      # Create standalone .zip for Windows (like Sparrow)
      - name: Create Windows standalone ZIP
        if: matrix.platform == 'windows-latest'
        run: |
          $version = if ($env:GITHUB_REF -match "refs/tags/(.+)") { $matches[1] } else { "dev" }
          $zipName = "barqly-vault-$version-windows-x64.zip"
          $appPath = "src-tauri/target/release/barqly-vault.exe"
          if (Test-Path $appPath) {
            Compress-Archive -Path $appPath -DestinationPath $zipName
            echo "Created standalone ZIP: $zipName"
          }
      
      # Create .tar.gz for Linux (like Sparrow)  
      - name: Create Linux standalone archive
        if: contains(matrix.platform, 'ubuntu')
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="dev"
          fi
          
          BINARY_PATH="src-tauri/target/release/barqly-vault"
          if [ -f "$BINARY_PATH" ]; then
            ARCHIVE_NAME="barqly-vault-$VERSION-linux-${{ matrix.arch }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
            echo "Created standalone archive: $ARCHIVE_NAME"
          fi
      
      # Cleanup keychain (macOS only)
      - name: Cleanup keychain
        if: always() && matrix.platform == 'macos-latest'
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain $KEYCHAIN_PATH || true
          fi