name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'        # Production releases
      - 'v*.*.*-beta*'  # Beta releases
      - 'v*.*.*-rc*'    # Release candidates
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  discussions: write

jobs:
  # Create release draft
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="v${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"* %s by @%an" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ steps.version.outputs.version }}" >> CHANGELOG.md
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Barqly Vault ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: ${{ github.event.inputs.prerelease || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  # Build for all platforms
  build-release:
    name: Build Release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            bundles: appimage,deb
            artifact_name: linux-x64
            artifact_paths: |
              appimage/*.AppImage
              deb/*.deb
          
          # macOS Universal build
          - os: macos-latest
            target: universal-apple-darwin
            bundles: dmg
            artifact_name: macos-universal
            artifact_paths: |
              dmg/*.dmg
          
          # Windows builds
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            bundles: msi,nsis
            artifact_name: windows-x64
            artifact_paths: |
              msi/*.msi
              nsis/*.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target != 'universal-apple-darwin' && matrix.target || '' }}
      
      - name: Add macOS targets for universal
        if: matrix.target == 'universal-apple-darwin'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: ${{ matrix.os }}-${{ matrix.target }}-release
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev \
            libayatana-appindicator3-dev
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Update version in configs
        run: |
          # Update version in tauri.conf.json
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION=${VERSION#v}  # Remove 'v' prefix
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          sed -i.bak "s/version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
      
      # Standard build for Linux and Windows
      - name: Build application
        if: matrix.target != 'universal-apple-darwin'
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: |
          cd src-tauri
          cargo tauri build --target ${{ matrix.target }} --bundles ${{ matrix.bundles }}
      
      # Universal build for macOS
      - name: Build macOS universal
        if: matrix.target == 'universal-apple-darwin'
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Import certificates if available
          if [ -n "$APPLE_CERTIFICATE" ]; then
            echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
            security create-keychain -p actions temp.keychain
            security default-keychain -s temp.keychain
            security unlock-keychain -p actions temp.keychain
            security import certificate.p12 -k temp.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain
          fi
          
          # Build universal binary
          make dmg-universal
          
          # Notarize if credentials available
          if [ -n "$APPLE_ID" ] && [ -n "$APPLE_PASSWORD" ]; then
            echo "Notarizing DMG..."
            xcrun notarytool submit target/universal-apple-darwin/release/bundle/dmg/*.dmg \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait
          fi
      
      # Sign Windows binaries
      - name: Sign Windows binaries
        if: matrix.os == 'windows-2022'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERTIFICATE) {
            $cert = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
            [System.IO.File]::WriteAllBytes("certificate.pfx", $cert)
            
            # Sign all executables
            Get-ChildItem -Path "src-tauri\target\${{ matrix.target }}\release\bundle" -Recurse -Include *.exe,*.msi | ForEach-Object {
              signtool sign /f certificate.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 $_.FullName
            }
            
            Remove-Item certificate.pfx
          }
      
      # Find and prepare artifacts
      - name: Prepare artifacts
        id: artifacts
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "universal-apple-darwin" ]]; then
            BASE_PATH="src-tauri/target/universal-apple-darwin/release/bundle"
          else
            BASE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle"
          fi
          
          # Create staging directory
          mkdir -p release-artifacts
          
          # Copy artifacts based on bundle type
          for bundle in $(echo "${{ matrix.bundles }}" | tr ',' ' '); do
            if [ -d "$BASE_PATH/$bundle" ]; then
              cp $BASE_PATH/$bundle/* release-artifacts/ 2>/dev/null || true
            fi
          done
          
          # List artifacts
          echo "Found artifacts:"
          ls -la release-artifacts/
      
      # Upload artifacts to release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: release-artifacts/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Also upload as workflow artifacts for testing
      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.artifact_name }}
          path: release-artifacts/
          retention-days: 30

  # Generate checksums
  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          path: artifacts/
      
      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.msi" -o -name "*.exe" \) | while read file; do
            sha256sum "$file" >> ../checksums.txt
          done
          cd ..
          
          echo "### SHA256 Checksums" > CHECKSUMS.md
          echo '```' >> CHECKSUMS.md
          cat checksums.txt >> CHECKSUMS.md
          echo '```' >> CHECKSUMS.md
      
      - name: Upload checksums
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            checksums.txt
            CHECKSUMS.md
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish release
  publish-release:
    name: Publish Release
    needs: [create-release, build-release, generate-checksums]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = '${{ needs.create-release.outputs.version }}';
            
            // Get the release
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            const release = releases.data.find(r => r.tag_name === tag);
            
            if (!release) {
              throw new Error(`Release ${tag} not found`);
            }
            
            // Update release to published
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.id,
              draft: false,
              body: release.body + '\n\n## Installation\n\n' +
                '### macOS\n' +
                '1. Download the `.dmg` file (works on both Intel and Apple Silicon)\n' +
                '2. Open the DMG and drag Barqly Vault to Applications\n\n' +
                '### Linux\n' +
                '- **AppImage**: Download, make executable (`chmod +x`), and run\n' +
                '- **.deb**: Install with `sudo dpkg -i barqly-vault_*.deb`\n\n' +
                '### Windows\n' +
                '- **MSI**: Download and run the installer\n' +
                '- **EXE**: Download and run the setup executable\n\n' +
                '### Verify Downloads\n' +
                'Check file integrity using the provided `checksums.txt` file.'
            });
            
            console.log(`Published release ${tag}`);