# Barqly Vault - Cursor Rules

## Project Overview
Barqly Vault is a cross-platform desktop application for secure file encryption using the `age` encryption standard, built with Tauri (Rust backend) and React/TypeScript (frontend). The application is specifically designed for Bitcoin custody backup and restoration scenarios.

## General Development Guidelines

### Code Quality Standards
- **Security First**: All cryptographic operations must use audited libraries (age encryption)
- **Type Safety**: Use TypeScript for frontend, leverage Rust's type system for backend
- **Error Handling**: Comprehensive error handling with user-friendly messages
- **Testing**: Maintain >80% test coverage for security-critical code
- **Documentation**: Document all public APIs, complex logic, and security considerations

### Architecture Principles
1. **Separation of Concerns**: Clear boundaries between frontend, backend, and Tauri bridge
2. **Immutability**: Prefer immutable data structures where possible
3. **Minimal Dependencies**: Reduce attack surface by limiting external dependencies
4. **Cross-Platform Consistency**: Ensure identical behavior across macOS, Windows, and Linux

### Version Requirements
- **Node.js**: v22.17.0 LTS or higher
- **Rust**: Latest stable version (1.87.0+)
- **Tauri**: v2.x (stable)
- **React**: v18 LTS
- **TypeScript**: v5.x

### Security Guidelines
- Never store unencrypted private keys in memory longer than necessary
- Use constant-time comparisons for cryptographic operations
- Validate all user input before processing
- Implement rate limiting for passphrase attempts
- Clear sensitive data from memory after use (use `zeroize` crate in Rust)

### File Organization
- Place Rust modules in logical subdirectories under `src-tauri/src/`
- Keep React components modular and co-located with their tests
- Use clear, descriptive file names that reflect the module's purpose

### Commit Guidelines
- Use conventional commits format: `type(scope): description`
- Types: feat, fix, docs, style, refactor, test, chore
- Keep commits atomic and focused on a single change
- Reference issue numbers when applicable

### Testing Strategy
- Unit tests for all business logic
- Integration tests for Tauri commands
- E2E tests for critical user workflows
- Security tests for crypto operations

### Performance Targets
- Startup time: <2 seconds
- Encryption speed: >10MB/s
- Memory usage: <200MB for typical operations
- File size limit: 100MB (soft limit for Bitcoin custody use case)

### Platform-Specific Considerations
- Use OS-specific config directories:
  - macOS: `~/.config/barqly-vault/` or `~/Library/Application Support/barqly-vault/`
  - Windows: `%APPDATA%\barqly-vault\`
  - Linux: `~/.config/barqly-vault/`
- Follow platform conventions for file paths and UI patterns

### Code Review Checklist
- [ ] Security implications reviewed
- [ ] Error handling comprehensive
- [ ] Tests included and passing
- [ ] Documentation updated
- [ ] Cross-platform compatibility verified
- [ ] Performance impact assessed

## AI Assistant Guidelines
When working on this project:
1. Always prioritize security over convenience
2. Provide clear explanations for cryptographic choices
3. Suggest tests for any new functionality
4. Consider cross-platform implications
5. Follow Rust and TypeScript best practices
6. Use established patterns from the existing codebase 